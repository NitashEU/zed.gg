{"version":3,"file":"zed-gg.js","sourceRoot":"","sources":["../../src/zed-gg.ts"],"names":[],"mappings":";;;;;;;;AAGA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAEnD,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGlD,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAEhE,MAAM;IAQJ,YAAY,MAAc,EAAE,MAAc,EAAE,UAAwB;QAmD7D,cAAS,GAAG;YACjB,EAAE,EAAE;gBACF,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC;aAChD;SACF,CAAA;QAtDC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,CAAC,UAAU;cACzB,CAAC,IAAI,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;cAChD,UAAU,CAAC;QAEf,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACrC,CAAC;IAEO,2BAA2B;QACjC,IAAI,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAClD,IAAI,OAAO,GAAwB;YACjC,OAAO,EAAE,UAAU,CAAC,mBAAmB,CAAC,SAAS,CAAC,OAAO,EAAE;gBACzD,UAAU,EAAE,UAAU;aACvB,CAAC;YACF,OAAO,EAAE,EAAE,cAAc,EAAE,IAAI,CAAC,MAAM,EAAE;SACzC,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAEa,yBAAyB,CAAC,YAAoB;;YAC1D,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,EAAE;gBAClE,YAAY;aACb,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;KAAA;IAKa,OAAO,CAAI,iBAAuC,EAAE,OAAa,EAAE,GAAG,MAAa;;YAC/F,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,iBAAiB,CAAC,GAAG,GAAG,UAAU,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACzF,CAAC;YAED,IAAI,CAAC;gBACH,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gBAC7D,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YACjF,CAAC;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACV,IAAI,GAAG,GAAG,EAA6B,CAAC;gBACxC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;gBACjD,MAAM,GAAG,CAAC;YACZ,CAAC;QACH,CAAC;KAAA;IAEO,cAAc,CAAC,UAA0B,EAAE,OAAyC;IAE5F,CAAC;CAOF","sourcesContent":["import * as request from 'request';\r\n\r\nimport { CustomResponseException } from './models/custom-response-exception.model';\r\nimport { Endpoints } from './endpoints';\r\nimport { HttpHelper } from './helpers/http-helper';\r\nimport { HttpStatusCode } from './enums/http-status-code.enum';\r\nimport { RateLimit } from './rate-limit/rate-limit';\r\nimport { Region } from './enums/region.enum';\r\nimport { Requester } from './helpers/requester';\r\nimport { Serializer } from './helpers/serializer';\r\nimport { Summoner } from './models/summoner.model';\r\nimport { UrlAndConstructor } from './helpers/url-and-constructor';\r\nimport { platformIds } from './constants/platform-ids.constant';\r\n\r\nexport class ZedGG {\r\n  private requester: Requester;\r\n  private region: Region;\r\n  private apiKey: string;\r\n  private rateLimits: RateLimit[];\r\n\r\n  constructor(region: Region, apiKey: string)\r\n  constructor(region: Region, apiKey: string, rateLimits: RateLimit[])\r\n  constructor(region: Region, apiKey: string, rateLimits?: RateLimit[]) {\r\n    this.region = region;\r\n    this.apiKey = apiKey;\r\n    this.rateLimits = !rateLimits\r\n      ? [new RateLimit(10, 10), new RateLimit(600, 500)]\r\n      : rateLimits;\r\n\r\n    this.defineDefaultRequestOptions();\r\n  }\r\n\r\n  private defineDefaultRequestOptions() {\r\n    let platformId = platformIds[Region[this.region]];\r\n    let options: request.CoreOptions = {\r\n      baseUrl: HttpHelper.buildUrlWithOptions(Endpoints.baseUrl, {\r\n        platformId: platformId\r\n      }),\r\n      headers: { 'X-Riot-Token': this.apiKey }\r\n    };\r\n    this.requester = new Requester(options);\r\n  }\r\n\r\n  private async getSummonerBySummonerName(summonerName: string): Promise<Summoner> {\r\n    let result = await this.request(Endpoints.Summoners.bySummonerName, {\r\n      summonerName\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private async request<T>(urlAndConstructor: UrlAndConstructor<T>): Promise<T>\r\n  private async request<T>(urlAndConstructor: UrlAndConstructor<T>, ...params: any[]): Promise<T>\r\n  private async request<T>(urlAndConstructor: UrlAndConstructor<T>, options: any): Promise<T>\r\n  private async request<T>(urlAndConstructor: UrlAndConstructor<T>, options?: any, ...params: any[]): Promise<T> {\r\n    if (!!options) {\r\n      urlAndConstructor.url = HttpHelper.buildUrlWithOptions(urlAndConstructor.url, options);\r\n    }\r\n\r\n    try {\r\n      let result = await this.requester.get(urlAndConstructor.url);\r\n      return Serializer.deserialize(urlAndConstructor.classConstructor, result.body);\r\n    }\r\n    catch (ex) {\r\n      let rex = ex as CustomResponseException;\r\n      this.handleResponse(rex.statusCode, rex.headers);\r\n      throw rex;\r\n    }\r\n  }\r\n\r\n  private handleResponse(statusCode: HttpStatusCode, headers: { key: string, value: string }[]): void {\r\n\r\n  }\r\n\r\n  public summoners = {\r\n    by: {\r\n      name: this.getSummonerBySummonerName.bind(this)\r\n    }\r\n  }\r\n} "]}